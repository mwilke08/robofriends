{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","toLowerCase","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC1B,OACG,yBACAC,UAAU,uDACP,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACG,4BAAML,GACN,2BAAKC,MCaFK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,OACA,oCAEGA,EAAOC,KAAK,SAACC,EAAKC,GACf,OACG,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCEdW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAC/B,OACG,yBAAKX,UAAU,OACZ,2BACAA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCIJI,EAXA,SAAAC,GAEZ,OACG,yBACAC,MACC,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACtDJ,EAAMK,WCiBDC,E,kDAtBZ,WAAYN,GAAO,IAAD,8BACf,gBACKO,MAAQ,CACVC,UAAU,GAHE,E,8DAOAC,EAAOC,GACtBC,KAAKC,SAAS,CACXJ,UAAU,M,+BAKb,OAAGG,KAAKJ,MAAMC,SACJ,uDAEHG,KAAKX,MAAMK,a,GAlBGQ,aC+CZC,G,wDAzCZ,aAAc,IAAD,8BACV,gBAaHC,eAAiB,SAAAC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACVnB,OAAQ,GACR6B,YAAa,IAJN,E,gEAQO,IAAD,OAChBG,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACxB,OAAQoC,S,+BAOnC,IAAD,EAC2Bb,KAAKJ,MAA7BnB,EADH,EACGA,OAAQ6B,EADX,EACWA,YACVQ,EAAiBrC,EAAOsC,QAAO,SAAAC,GAClC,OAAQA,EAAM9C,KAAK+C,oBACfC,SAASZ,EAAYa,kBAG5B,OAAQ1C,EAAO2C,OAET,yBAAK/C,UAAU,MACZ,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACG,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAU3B,OAAQqC,OAPT,2C,GA1BZZ,cCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,oCACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,a","file":"static/js/main.cbbce6eb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n   return(\r\n      <div \r\n      className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n         <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"/>\r\n         <div>\r\n            <h2>{ name }</h2>\r\n            <p>{ email }</p>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n   return(\r\n   <>\r\n   {\r\n      robots.map( (user,i) => {\r\n         return (\r\n            <Card \r\n            key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}\r\n            />\r\n         );\r\n      })\r\n   }\r\n   </>\r\n   );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n   return(\r\n      <div className='pa2'>\r\n         <input \r\n         className='pa3 ba b--green bg-lightest-blue'\r\n         type='search' \r\n         placeholder='search robots'\r\n         onChange={searchChange}\r\n         />\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n   \r\n   return(\r\n      <div \r\n      style=\r\n      {{overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\r\n         {props.children}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n   constructor(props){\r\n      super();\r\n      this.state = {\r\n         hasError: false\r\n      }\r\n   }\r\n\r\n   componentDidCatch(error, info){\r\n      this.setState({\r\n         hasError: true\r\n      })\r\n   }\r\n\r\n   render(){\r\n      if(this.state.hasError){\r\n         return <h1>Ooops. That is not good</h1>\r\n      }\r\n      return this.props.children\r\n   }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n   constructor(){\r\n      super();\r\n      this.state = {\r\n         robots: [],\r\n         searchfield: ''\r\n      }\r\n   }\r\n\r\n   componentDidMount(){\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then(response => response.json())\r\n         .then(users => this.setState({robots: users}));      \r\n   }\r\n\r\n   onSearchChange = event => {\r\n      this.setState({searchfield: event.target.value});\r\n   }\r\n\r\n   render(){\r\n      const { robots, searchfield } = this.state;\r\n      const filteredRobots = robots.filter(robot => {\r\n         return( robot.name.toLocaleLowerCase()\r\n            .includes(searchfield.toLowerCase())\r\n         );\r\n      })\r\n      return !robots.length ? <h1>Loading</h1> :\r\n         (\r\n            <div className='tc'>\r\n               <h1 className='f1'>RoboFriends</h1>\r\n               <SearchBox searchChange={this.onSearchChange}/>\r\n               <Scroll>\r\n                  <ErrorBoundry>\r\n                     <CardList robots={filteredRobots}/>\r\n                  </ErrorBoundry>\r\n               </Scroll>\r\n            </div>\r\n         );\r\n   }\r\n   \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App/>\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}